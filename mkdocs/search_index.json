{
    "docs": [
        {
            "location": "/", 
            "text": "Certificate Identity Declaration SDK for Citrix Receiver for Linux 13.10\n\n\nCompatibility with Receiver\n\n\nThis is Version 13.10 of the Certificate Identity Declaration SDK. It is intended for use with Receiver for Linux builds in the 13.10 series. There are separate versions of the SDK for each of the released architectures (X86, X86_64, and ARMhf) that differ only in the included binaries. \n\n\nWho should use this SDK?\n\n\nThe purpose of this SDK is to provide developers with a means of declaring the user's smart card identity to a StoreFront server without performing a full smart card based authentication. \n\n\nCID (Certificate Identity Declaration) is motivated by trying to get a speed up when using older smart cards which were noticeably slow. The CID protocol bypasses the crypto step the smart card does for logging on to a StoreFront server (the ICA launch still uses smart card though). \n\n\nWith CID the client just sends to StoreFront the public client certificate to identify the user instead of doing a full SSL handshake. This approach is significantly faster than a proper client certificate logon, especially when slow smart cards are involved. \n\n\nThe developers who want to create their own plugin must conform to the \n\"CitrixAuthManagerCustomProtocolSDK.h\"\n header file available in the \n\"include\"\n directory. Refer to the file and to the sample code for more information. \n\n\nTo use this feature, the CID extension has to be installed and the protocol enabled in the StoreFront site. Please refer to the documentation of the StoreFront Authentication SDK.\n\n\nThe sample plugin\n\n\nTo build the sample plugin, the cURL library must be installed on the system, most Linux distribution make it available through their native package managers. \n\n\nThe sample plugin will build into two modules both named \"libCID.so\", coming in both debug and retail version, the former containing the debugging symbols. \n\n\nThe sample plugin can be used with Citrix Receiver for Linux by adding the following entries to the Auth Manager's configuration file (located by default at /opt/Citrix/ICAClient/config/AuthManConfig.xml): \n\n\nkey\nProtocolOrder\n/key\n \n\nvalue\ncertificateidentitydeclaration\n/value\n  \n\n\nProtocols\n     \n    \ncertificateidentitydeclaration\n         \n        \nEnabled\nTrue\n/Enabled\n         \n        \nKeepLibraryLoaded\nTrue\n/KeepLibraryLoaded\n         \n        \nPath\n/path/to/plugin/libCID.so\n/Path\n         \n        \nPluginType\nCustomProtocolDLL\n/PluginType\n     \n    \n/certificateidentitydeclaration\n \n\n/Protocols\n \n\n\n\n\n\nDuplicate nodes are not allowed in AuthManConfig.xml. If the \"Protocols\" node already exists, the contents of the example above have to be combined with the existing node. \n\n\nAfter changes had been made to the configuration file, Auth Manager has to be restarted to acquire them. \n\n\nThe name of the protocol specified in the \"ProtocolOrder\" key must match the name of the corresponding node under \"Protocols\". \n\n\nFor clarity, in this example only Certificate Identity Declaration has been specified in the list of protocols. Other protocols can be added to the list. \n\n\nThe value of \"KeepLibraryLoaded\" in the protocol configuration specifies whether the module has to be kept loaded in memory after use. If set to \"False\", the module will be reloaded upon each use. \n\n\nAfter being loaded and launched, the sample plugin will look for a certificate name \"UserIdentifyingCertificate.cer\" in the home directory of the current user. This should be the public certificate from the smart card. \n\n\nIn the example provided, the path and the name of the certificate to use are hard-coded.\n\n\nChange history\n\n\n\n\n\n\n\n\nVersion\n\n\nChange\n\n\n\n\n\n\n\n\n\n\n13.8 and later\n\n\nRemove support for the armel platform\n\n\n\n\n\n\n13.5\n\n\nNo change\n\n\n\n\n\n\n13.4\n\n\nThe first release of this SDK. Includes a sample plugin and its source code", 
            "title": "Home"
        }, 
        {
            "location": "/#certificate-identity-declaration-sdk-for-citrix-receiver-for-linux-1310", 
            "text": "", 
            "title": "Certificate Identity Declaration SDK for Citrix Receiver for Linux 13.10"
        }, 
        {
            "location": "/#compatibility-with-receiver", 
            "text": "This is Version 13.10 of the Certificate Identity Declaration SDK. It is intended for use with Receiver for Linux builds in the 13.10 series. There are separate versions of the SDK for each of the released architectures (X86, X86_64, and ARMhf) that differ only in the included binaries.", 
            "title": "Compatibility with Receiver"
        }, 
        {
            "location": "/#who-should-use-this-sdk", 
            "text": "The purpose of this SDK is to provide developers with a means of declaring the user's smart card identity to a StoreFront server without performing a full smart card based authentication.   CID (Certificate Identity Declaration) is motivated by trying to get a speed up when using older smart cards which were noticeably slow. The CID protocol bypasses the crypto step the smart card does for logging on to a StoreFront server (the ICA launch still uses smart card though).   With CID the client just sends to StoreFront the public client certificate to identify the user instead of doing a full SSL handshake. This approach is significantly faster than a proper client certificate logon, especially when slow smart cards are involved.   The developers who want to create their own plugin must conform to the  \"CitrixAuthManagerCustomProtocolSDK.h\"  header file available in the  \"include\"  directory. Refer to the file and to the sample code for more information.   To use this feature, the CID extension has to be installed and the protocol enabled in the StoreFront site. Please refer to the documentation of the StoreFront Authentication SDK.", 
            "title": "Who should use this SDK?"
        }, 
        {
            "location": "/#the-sample-plugin", 
            "text": "To build the sample plugin, the cURL library must be installed on the system, most Linux distribution make it available through their native package managers.   The sample plugin will build into two modules both named \"libCID.so\", coming in both debug and retail version, the former containing the debugging symbols.   The sample plugin can be used with Citrix Receiver for Linux by adding the following entries to the Auth Manager's configuration file (located by default at /opt/Citrix/ICAClient/config/AuthManConfig.xml):   key ProtocolOrder /key   value certificateidentitydeclaration /value    Protocols      \n     certificateidentitydeclaration          \n         Enabled True /Enabled          \n         KeepLibraryLoaded True /KeepLibraryLoaded          \n         Path /path/to/plugin/libCID.so /Path          \n         PluginType CustomProtocolDLL /PluginType      \n     /certificateidentitydeclaration   /Protocols    Duplicate nodes are not allowed in AuthManConfig.xml. If the \"Protocols\" node already exists, the contents of the example above have to be combined with the existing node.   After changes had been made to the configuration file, Auth Manager has to be restarted to acquire them.   The name of the protocol specified in the \"ProtocolOrder\" key must match the name of the corresponding node under \"Protocols\".   For clarity, in this example only Certificate Identity Declaration has been specified in the list of protocols. Other protocols can be added to the list.   The value of \"KeepLibraryLoaded\" in the protocol configuration specifies whether the module has to be kept loaded in memory after use. If set to \"False\", the module will be reloaded upon each use.   After being loaded and launched, the sample plugin will look for a certificate name \"UserIdentifyingCertificate.cer\" in the home directory of the current user. This should be the public certificate from the smart card.   In the example provided, the path and the name of the certificate to use are hard-coded.", 
            "title": "The sample plugin"
        }, 
        {
            "location": "/#change-history", 
            "text": "Version  Change      13.8 and later  Remove support for the armel platform    13.5  No change    13.4  The first release of this SDK. Includes a sample plugin and its source code", 
            "title": "Change history"
        }
    ]
}